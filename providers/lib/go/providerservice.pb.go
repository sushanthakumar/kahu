//
//Copyright 2022 The SODA Authors.
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.9.1
// source: proto/providerservice.proto

package providerservice

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProviderCapability_Service_Type int32

const (
	ProviderCapability_Service_UNKNOWN               ProviderCapability_Service_Type = 0
	ProviderCapability_Service_META_BACKUP_SERVICE   ProviderCapability_Service_Type = 1
	ProviderCapability_Service_VOLUME_BACKUP_SERVICE ProviderCapability_Service_Type = 2
)

// Enum value maps for ProviderCapability_Service_Type.
var (
	ProviderCapability_Service_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "META_BACKUP_SERVICE",
		2: "VOLUME_BACKUP_SERVICE",
	}
	ProviderCapability_Service_Type_value = map[string]int32{
		"UNKNOWN":               0,
		"META_BACKUP_SERVICE":   1,
		"VOLUME_BACKUP_SERVICE": 2,
	}
)

func (x ProviderCapability_Service_Type) Enum() *ProviderCapability_Service_Type {
	p := new(ProviderCapability_Service_Type)
	*p = x
	return p
}

func (x ProviderCapability_Service_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderCapability_Service_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_providerservice_proto_enumTypes[0].Descriptor()
}

func (ProviderCapability_Service_Type) Type() protoreflect.EnumType {
	return &file_proto_providerservice_proto_enumTypes[0]
}

func (x ProviderCapability_Service_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderCapability_Service_Type.Descriptor instead.
func (ProviderCapability_Service_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4, 0, 0}
}

type ProviderCapability_MetaBackupServiceSupport_Type int32

const (
	ProviderCapability_MetaBackupServiceSupport_UNKNOWN       ProviderCapability_MetaBackupServiceSupport_Type = 0
	ProviderCapability_MetaBackupServiceSupport_NEED_SNAPSHOT ProviderCapability_MetaBackupServiceSupport_Type = 1
)

// Enum value maps for ProviderCapability_MetaBackupServiceSupport_Type.
var (
	ProviderCapability_MetaBackupServiceSupport_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "NEED_SNAPSHOT",
	}
	ProviderCapability_MetaBackupServiceSupport_Type_value = map[string]int32{
		"UNKNOWN":       0,
		"NEED_SNAPSHOT": 1,
	}
)

func (x ProviderCapability_MetaBackupServiceSupport_Type) Enum() *ProviderCapability_MetaBackupServiceSupport_Type {
	p := new(ProviderCapability_MetaBackupServiceSupport_Type)
	*p = x
	return p
}

func (x ProviderCapability_MetaBackupServiceSupport_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderCapability_MetaBackupServiceSupport_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_providerservice_proto_enumTypes[1].Descriptor()
}

func (ProviderCapability_MetaBackupServiceSupport_Type) Type() protoreflect.EnumType {
	return &file_proto_providerservice_proto_enumTypes[1]
}

func (x ProviderCapability_MetaBackupServiceSupport_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderCapability_MetaBackupServiceSupport_Type.Descriptor instead.
func (ProviderCapability_MetaBackupServiceSupport_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4, 1, 0}
}

type ProviderCapability_VolumeBackupServiceSupport_Type int32

const (
	ProviderCapability_VolumeBackupServiceSupport_UNKNOWN       ProviderCapability_VolumeBackupServiceSupport_Type = 0
	ProviderCapability_VolumeBackupServiceSupport_NEED_SNAPSHOT ProviderCapability_VolumeBackupServiceSupport_Type = 1
	ProviderCapability_VolumeBackupServiceSupport_NEED_VOLUME   ProviderCapability_VolumeBackupServiceSupport_Type = 2
)

// Enum value maps for ProviderCapability_VolumeBackupServiceSupport_Type.
var (
	ProviderCapability_VolumeBackupServiceSupport_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "NEED_SNAPSHOT",
		2: "NEED_VOLUME",
	}
	ProviderCapability_VolumeBackupServiceSupport_Type_value = map[string]int32{
		"UNKNOWN":       0,
		"NEED_SNAPSHOT": 1,
		"NEED_VOLUME":   2,
	}
)

func (x ProviderCapability_VolumeBackupServiceSupport_Type) Enum() *ProviderCapability_VolumeBackupServiceSupport_Type {
	p := new(ProviderCapability_VolumeBackupServiceSupport_Type)
	*p = x
	return p
}

func (x ProviderCapability_VolumeBackupServiceSupport_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderCapability_VolumeBackupServiceSupport_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_providerservice_proto_enumTypes[2].Descriptor()
}

func (ProviderCapability_VolumeBackupServiceSupport_Type) Type() protoreflect.EnumType {
	return &file_proto_providerservice_proto_enumTypes[2]
}

func (x ProviderCapability_VolumeBackupServiceSupport_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderCapability_VolumeBackupServiceSupport_Type.Descriptor instead.
func (ProviderCapability_VolumeBackupServiceSupport_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4, 2, 0}
}

// Get basic information about provider
type GetProviderInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProviderInfoRequest) Reset() {
	*x = GetProviderInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderInfoRequest) ProtoMessage() {}

func (x *GetProviderInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderInfoRequest.ProtoReflect.Descriptor instead.
func (*GetProviderInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{0}
}

// Response with basic provider information
type GetProviderInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider name which is mandatory
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// Provider version which is mandatory
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Optional provider specific parameters
	Manifest map[string]string `protobuf:"bytes,3,rep,name=manifest,proto3" json:"manifest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetProviderInfoResponse) Reset() {
	*x = GetProviderInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderInfoResponse) ProtoMessage() {}

func (x *GetProviderInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderInfoResponse.ProtoReflect.Descriptor instead.
func (*GetProviderInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{1}
}

func (x *GetProviderInfoResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetProviderInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetProviderInfoResponse) GetManifest() map[string]string {
	if x != nil {
		return x.Manifest
	}
	return nil
}

// Get different feature level capabilities from provider
type GetProviderCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProviderCapabilitiesRequest) Reset() {
	*x = GetProviderCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderCapabilitiesRequest) ProtoMessage() {}

func (x *GetProviderCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetProviderCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{2}
}

// Response with supported feature level capabilities from provider
type GetProviderCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []*ProviderCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *GetProviderCapabilitiesResponse) Reset() {
	*x = GetProviderCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderCapabilitiesResponse) ProtoMessage() {}

func (x *GetProviderCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetProviderCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{3}
}

func (x *GetProviderCapabilitiesResponse) GetCapabilities() []*ProviderCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Supported provider capability
type ProviderCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ProviderCapability_Service_
	//	*ProviderCapability_MetaBackupService
	//	*ProviderCapability_VolumeBackupService
	Type isProviderCapability_Type `protobuf_oneof:"type"`
}

func (x *ProviderCapability) Reset() {
	*x = ProviderCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability) ProtoMessage() {}

func (x *ProviderCapability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability.ProtoReflect.Descriptor instead.
func (*ProviderCapability) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4}
}

func (m *ProviderCapability) GetType() isProviderCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ProviderCapability) GetService() *ProviderCapability_Service {
	if x, ok := x.GetType().(*ProviderCapability_Service_); ok {
		return x.Service
	}
	return nil
}

func (x *ProviderCapability) GetMetaBackupService() *ProviderCapability_MetaBackupServiceSupport {
	if x, ok := x.GetType().(*ProviderCapability_MetaBackupService); ok {
		return x.MetaBackupService
	}
	return nil
}

func (x *ProviderCapability) GetVolumeBackupService() *ProviderCapability_VolumeBackupServiceSupport {
	if x, ok := x.GetType().(*ProviderCapability_VolumeBackupService); ok {
		return x.VolumeBackupService
	}
	return nil
}

type isProviderCapability_Type interface {
	isProviderCapability_Type()
}

type ProviderCapability_Service_ struct {
	Service *ProviderCapability_Service `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type ProviderCapability_MetaBackupService struct {
	MetaBackupService *ProviderCapability_MetaBackupServiceSupport `protobuf:"bytes,2,opt,name=meta_backup_service,json=metaBackupService,proto3,oneof"`
}

type ProviderCapability_VolumeBackupService struct {
	VolumeBackupService *ProviderCapability_VolumeBackupServiceSupport `protobuf:"bytes,3,opt,name=volume_backup_service,json=volumeBackupService,proto3,oneof"`
}

func (*ProviderCapability_Service_) isProviderCapability_Type() {}

func (*ProviderCapability_MetaBackupService) isProviderCapability_Type() {}

func (*ProviderCapability_VolumeBackupService) isProviderCapability_Type() {}

// Probe request to check health/availability
type ProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProbeRequest) Reset() {
	*x = ProbeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeRequest) ProtoMessage() {}

func (x *ProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeRequest.ProtoReflect.Descriptor instead.
func (*ProbeRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{5}
}

// Response to indicate health/availability status
type ProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if healthy/available or not
	Ready *wrappers.BoolValue `protobuf:"bytes,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ProbeResponse) Reset() {
	*x = ProbeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeResponse) ProtoMessage() {}

func (x *ProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeResponse.ProtoReflect.Descriptor instead.
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{6}
}

func (x *ProbeResponse) GetReady() *wrappers.BoolValue {
	if x != nil {
		return x.Ready
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{7}
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*UploadRequest_Info
	//	*UploadRequest_ChunkData
	Data isUploadRequest_Data `protobuf_oneof:"Data"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{8}
}

func (m *UploadRequest) GetData() isUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadRequest) GetInfo() *UploadRequest_FileInfo {
	if x, ok := x.GetData().(*UploadRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *UploadRequest) GetChunkData() []byte {
	if x, ok := x.GetData().(*UploadRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isUploadRequest_Data interface {
	isUploadRequest_Data()
}

type UploadRequest_Info struct {
	// File information and attributes
	Info *UploadRequest_FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadRequest_ChunkData struct {
	// File content
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadRequest_Info) isUploadRequest_Data() {}

func (*UploadRequest_ChunkData) isUploadRequest_Data() {}

type ObjectExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File identifier
	FileIdentifier string `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	// Provider specific parameters passed in as opaque key-value pairs
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectExistsRequest) Reset() {
	*x = ObjectExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectExistsRequest) ProtoMessage() {}

func (x *ObjectExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectExistsRequest.ProtoReflect.Descriptor instead.
func (*ObjectExistsRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{9}
}

func (x *ObjectExistsRequest) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *ObjectExistsRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ObjectExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if file exists
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ObjectExistsResponse) Reset() {
	*x = ObjectExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectExistsResponse) ProtoMessage() {}

func (x *ObjectExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectExistsResponse.ProtoReflect.Descriptor instead.
func (*ObjectExistsResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{10}
}

func (x *ObjectExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File identifier
	FileIdentifier string `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	// Provider specific parameters passed in as opaque key-value pairs
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadRequest) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *DownloadRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*DownloadResponse_Info
	//	*DownloadResponse_ChunkData
	Data isDownloadResponse_Data `protobuf_oneof:"Data"`
}

func (x *DownloadResponse) Reset() {
	*x = DownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse) ProtoMessage() {}

func (x *DownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse.ProtoReflect.Descriptor instead.
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{12}
}

func (m *DownloadResponse) GetData() isDownloadResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DownloadResponse) GetInfo() *DownloadResponse_FileInfo {
	if x, ok := x.GetData().(*DownloadResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (x *DownloadResponse) GetChunkData() []byte {
	if x, ok := x.GetData().(*DownloadResponse_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isDownloadResponse_Data interface {
	isDownloadResponse_Data()
}

type DownloadResponse_Info struct {
	Info *DownloadResponse_FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type DownloadResponse_ChunkData struct {
	// File content being downloaded
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*DownloadResponse_Info) isDownloadResponse_Data() {}

func (*DownloadResponse_ChunkData) isDownloadResponse_Data() {}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File identifier
	FileIdentifier string `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	// Provider specific parameters passed in as opaque key-value pairs
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteRequest) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *DeleteRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type BackupIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvName         string          `protobuf:"bytes,1,opt,name=pv_name,json=pvName,proto3" json:"pv_name,omitempty"`
	BackupIdentity *BackupIdentity `protobuf:"bytes,2,opt,name=backup_identity,json=backupIdentity,proto3" json:"backup_identity,omitempty"`
}

func (x *BackupIdentifier) Reset() {
	*x = BackupIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIdentifier) ProtoMessage() {}

func (x *BackupIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIdentifier.ProtoReflect.Descriptor instead.
func (*BackupIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{14}
}

func (x *BackupIdentifier) GetPvName() string {
	if x != nil {
		return x.PvName
	}
	return ""
}

func (x *BackupIdentifier) GetBackupIdentity() *BackupIdentity {
	if x != nil {
		return x.BackupIdentity
	}
	return nil
}

type BackupIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupHandle     string            `protobuf:"bytes,1,opt,name=backup_handle,json=backupHandle,proto3" json:"backup_handle,omitempty"`
	BackupAttributes map[string]string `protobuf:"bytes,9,rep,name=backup_attributes,json=backupAttributes,proto3" json:"backup_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BackupIdentity) Reset() {
	*x = BackupIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIdentity) ProtoMessage() {}

func (x *BackupIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIdentity.ProtoReflect.Descriptor instead.
func (*BackupIdentity) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{15}
}

func (x *BackupIdentity) GetBackupHandle() string {
	if x != nil {
		return x.BackupHandle
	}
	return ""
}

func (x *BackupIdentity) GetBackupAttributes() map[string]string {
	if x != nil {
		return x.BackupAttributes
	}
	return nil
}

type RestoreIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pvc            *v1.PersistentVolumeClaim `protobuf:"bytes,1,opt,name=pvc,proto3" json:"pvc,omitempty"`
	BackupIdentity *BackupIdentity           `protobuf:"bytes,2,opt,name=backup_identity,json=backupIdentity,proto3" json:"backup_identity,omitempty"`
}

func (x *RestoreIdentifier) Reset() {
	*x = RestoreIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreIdentifier) ProtoMessage() {}

func (x *RestoreIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreIdentifier.ProtoReflect.Descriptor instead.
func (*RestoreIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{16}
}

func (x *RestoreIdentifier) GetPvc() *v1.PersistentVolumeClaim {
	if x != nil {
		return x.Pvc
	}
	return nil
}

func (x *RestoreIdentifier) GetBackupIdentity() *BackupIdentity {
	if x != nil {
		return x.BackupIdentity
	}
	return nil
}

type RestoreVolumeIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvcName        string                 `protobuf:"bytes,1,opt,name=pvc_name,json=pvcName,proto3" json:"pvc_name,omitempty"`
	VolumeIdentity *RestoreVolumeIdentity `protobuf:"bytes,2,opt,name=volume_identity,json=volumeIdentity,proto3" json:"volume_identity,omitempty"`
}

func (x *RestoreVolumeIdentifier) Reset() {
	*x = RestoreVolumeIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVolumeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVolumeIdentifier) ProtoMessage() {}

func (x *RestoreVolumeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVolumeIdentifier.ProtoReflect.Descriptor instead.
func (*RestoreVolumeIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{17}
}

func (x *RestoreVolumeIdentifier) GetPvcName() string {
	if x != nil {
		return x.PvcName
	}
	return ""
}

func (x *RestoreVolumeIdentifier) GetVolumeIdentity() *RestoreVolumeIdentity {
	if x != nil {
		return x.VolumeIdentity
	}
	return nil
}

type RestoreVolumeIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeHandle     string            `protobuf:"bytes,1,opt,name=volume_handle,json=volumeHandle,proto3" json:"volume_handle,omitempty"`
	VolumeAttributes map[string]string `protobuf:"bytes,9,rep,name=volume_attributes,json=volumeAttributes,proto3" json:"volume_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RestoreVolumeIdentity) Reset() {
	*x = RestoreVolumeIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVolumeIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVolumeIdentity) ProtoMessage() {}

func (x *RestoreVolumeIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVolumeIdentity.ProtoReflect.Descriptor instead.
func (*RestoreVolumeIdentity) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{18}
}

func (x *RestoreVolumeIdentity) GetVolumeHandle() string {
	if x != nil {
		return x.VolumeHandle
	}
	return ""
}

func (x *RestoreVolumeIdentity) GetVolumeAttributes() map[string]string {
	if x != nil {
		return x.VolumeAttributes
	}
	return nil
}

type VolBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pv       *v1.PersistentVolume `protobuf:"bytes,1,opt,name=pv,proto3" json:"pv,omitempty"`
	Snapshot *Snapshot            `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *VolBackup) Reset() {
	*x = VolBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolBackup) ProtoMessage() {}

func (x *VolBackup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolBackup.ProtoReflect.Descriptor instead.
func (*VolBackup) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{19}
}

func (x *VolBackup) GetPv() *v1.PersistentVolume {
	if x != nil {
		return x.Pv
	}
	return nil
}

func (x *VolBackup) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotHandle     string            `protobuf:"bytes,1,opt,name=snapshot_handle,json=snapshotHandle,proto3" json:"snapshot_handle,omitempty"`
	SnapshotAttributes map[string]string `protobuf:"bytes,9,rep,name=snapshot_attributes,json=snapshotAttributes,proto3" json:"snapshot_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{20}
}

func (x *Snapshot) GetSnapshotHandle() string {
	if x != nil {
		return x.SnapshotHandle
	}
	return ""
}

func (x *Snapshot) GetSnapshotAttributes() map[string]string {
	if x != nil {
		return x.SnapshotAttributes
	}
	return nil
}

type StartBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	Pv []*v1.PersistentVolume `protobuf:"bytes,1,rep,name=pv,proto3" json:"pv,omitempty"`
	// Backup content name
	BackupContentName string       `protobuf:"bytes,2,opt,name=backup_content_name,json=backupContentName,proto3" json:"backup_content_name,omitempty"`
	BackupInfo        []*VolBackup `protobuf:"bytes,3,rep,name=backupInfo,proto3" json:"backupInfo,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartBackupRequest) Reset() {
	*x = StartBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBackupRequest) ProtoMessage() {}

func (x *StartBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBackupRequest.ProtoReflect.Descriptor instead.
func (*StartBackupRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{21}
}

func (x *StartBackupRequest) GetPv() []*v1.PersistentVolume {
	if x != nil {
		return x.Pv
	}
	return nil
}

func (x *StartBackupRequest) GetBackupContentName() string {
	if x != nil {
		return x.BackupContentName
	}
	return ""
}

func (x *StartBackupRequest) GetBackupInfo() []*VolBackup {
	if x != nil {
		return x.BackupInfo
	}
	return nil
}

func (x *StartBackupRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type StartBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	BackupInfo []*BackupIdentifier `protobuf:"bytes,1,rep,name=backup_info,json=backupInfo,proto3" json:"backup_info,omitempty"`
	Errors     []string            `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StartBackupResponse) Reset() {
	*x = StartBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBackupResponse) ProtoMessage() {}

func (x *StartBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBackupResponse.ProtoReflect.Descriptor instead.
func (*StartBackupResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{22}
}

func (x *StartBackupResponse) GetBackupInfo() []*BackupIdentifier {
	if x != nil {
		return x.BackupInfo
	}
	return nil
}

func (x *StartBackupResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DeleteBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	BackupInfo []*BackupIdentity `protobuf:"bytes,1,rep,name=backup_info,json=backupInfo,proto3" json:"backup_info,omitempty"`
	// Backup content name
	BackupContentName string `protobuf:"bytes,2,opt,name=backup_content_name,json=backupContentName,proto3" json:"backup_content_name,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteBackupRequest) Reset() {
	*x = DeleteBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupRequest) ProtoMessage() {}

func (x *DeleteBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackupRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteBackupRequest) GetBackupInfo() []*BackupIdentity {
	if x != nil {
		return x.BackupInfo
	}
	return nil
}

func (x *DeleteBackupRequest) GetBackupContentName() string {
	if x != nil {
		return x.BackupContentName
	}
	return ""
}

func (x *DeleteBackupRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type DeleteBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	Success *wrappers.BoolValue `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  []string            `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DeleteBackupResponse) Reset() {
	*x = DeleteBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupResponse) ProtoMessage() {}

func (x *DeleteBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupResponse.ProtoReflect.Descriptor instead.
func (*DeleteBackupResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteBackupResponse) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *DeleteBackupResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CancelBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	BackupInfo []*BackupIdentity `protobuf:"bytes,1,rep,name=backup_info,json=backupInfo,proto3" json:"backup_info,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CancelBackupRequest) Reset() {
	*x = CancelBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBackupRequest) ProtoMessage() {}

func (x *CancelBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBackupRequest.ProtoReflect.Descriptor instead.
func (*CancelBackupRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{25}
}

func (x *CancelBackupRequest) GetBackupInfo() []*BackupIdentity {
	if x != nil {
		return x.BackupInfo
	}
	return nil
}

func (x *CancelBackupRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CancelBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	Success *wrappers.BoolValue `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  []string            `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CancelBackupResponse) Reset() {
	*x = CancelBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBackupResponse) ProtoMessage() {}

func (x *CancelBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBackupResponse.ProtoReflect.Descriptor instead.
func (*CancelBackupResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{26}
}

func (x *CancelBackupResponse) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *CancelBackupResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetBackupStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup handles
	BackupInfo []*BackupIdentity `protobuf:"bytes,1,rep,name=backup_info,json=backupInfo,proto3" json:"backup_info,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetBackupStatRequest) Reset() {
	*x = GetBackupStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupStatRequest) ProtoMessage() {}

func (x *GetBackupStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupStatRequest.ProtoReflect.Descriptor instead.
func (*GetBackupStatRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{27}
}

func (x *GetBackupStatRequest) GetBackupInfo() []*BackupIdentity {
	if x != nil {
		return x.BackupInfo
	}
	return nil
}

func (x *GetBackupStatRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type BackupStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupHandle string `protobuf:"bytes,1,opt,name=backup_handle,json=backupHandle,proto3" json:"backup_handle,omitempty"`
	// optional
	Progress int64 `protobuf:"varint,9,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *BackupStat) Reset() {
	*x = BackupStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupStat) ProtoMessage() {}

func (x *BackupStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupStat.ProtoReflect.Descriptor instead.
func (*BackupStat) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{28}
}

func (x *BackupStat) GetBackupHandle() string {
	if x != nil {
		return x.BackupHandle
	}
	return ""
}

func (x *BackupStat) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetBackupStatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupStats []*BackupStat `protobuf:"bytes,1,rep,name=backup_stats,json=backupStats,proto3" json:"backup_stats,omitempty"`
}

func (x *GetBackupStatResponse) Reset() {
	*x = GetBackupStatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupStatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupStatResponse) ProtoMessage() {}

func (x *GetBackupStatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupStatResponse.ProtoReflect.Descriptor instead.
func (*GetBackupStatResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{29}
}

func (x *GetBackupStatResponse) GetBackupStats() []*BackupStat {
	if x != nil {
		return x.BackupStats
	}
	return nil
}

type CreateVolumeFromBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	RestoreInfo []*RestoreIdentifier `protobuf:"bytes,1,rep,name=restore_info,json=restoreInfo,proto3" json:"restore_info,omitempty"`
	// Restore content name
	RestoreContentName string `protobuf:"bytes,2,opt,name=restore_content_name,json=restoreContentName,proto3" json:"restore_content_name,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateVolumeFromBackupRequest) Reset() {
	*x = CreateVolumeFromBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeFromBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeFromBackupRequest) ProtoMessage() {}

func (x *CreateVolumeFromBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeFromBackupRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeFromBackupRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{30}
}

func (x *CreateVolumeFromBackupRequest) GetRestoreInfo() []*RestoreIdentifier {
	if x != nil {
		return x.RestoreInfo
	}
	return nil
}

func (x *CreateVolumeFromBackupRequest) GetRestoreContentName() string {
	if x != nil {
		return x.RestoreContentName
	}
	return ""
}

func (x *CreateVolumeFromBackupRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CreateVolumeFromBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	VolumeIdentifiers []*RestoreVolumeIdentifier `protobuf:"bytes,1,rep,name=volume_identifiers,json=volumeIdentifiers,proto3" json:"volume_identifiers,omitempty"`
	Errors            []string                   `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CreateVolumeFromBackupResponse) Reset() {
	*x = CreateVolumeFromBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeFromBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeFromBackupResponse) ProtoMessage() {}

func (x *CreateVolumeFromBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeFromBackupResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeFromBackupResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{31}
}

func (x *CreateVolumeFromBackupResponse) GetVolumeIdentifiers() []*RestoreVolumeIdentifier {
	if x != nil {
		return x.VolumeIdentifiers
	}
	return nil
}

func (x *CreateVolumeFromBackupResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetRestoreStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// restore volume handles
	RestoreVolumeIdentity []*RestoreVolumeIdentity `protobuf:"bytes,1,rep,name=restore_volume_identity,json=restoreVolumeIdentity,proto3" json:"restore_volume_identity,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetRestoreStatRequest) Reset() {
	*x = GetRestoreStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRestoreStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRestoreStatRequest) ProtoMessage() {}

func (x *GetRestoreStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRestoreStatRequest.ProtoReflect.Descriptor instead.
func (*GetRestoreStatRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{32}
}

func (x *GetRestoreStatRequest) GetRestoreVolumeIdentity() []*RestoreVolumeIdentity {
	if x != nil {
		return x.RestoreVolumeIdentity
	}
	return nil
}

func (x *GetRestoreStatRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type RestoreStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestoreVolumeHandle string `protobuf:"bytes,1,opt,name=restore_volume_handle,json=restoreVolumeHandle,proto3" json:"restore_volume_handle,omitempty"`
	// optional
	Progress int64 `protobuf:"varint,9,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *RestoreStat) Reset() {
	*x = RestoreStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreStat) ProtoMessage() {}

func (x *RestoreStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreStat.ProtoReflect.Descriptor instead.
func (*RestoreStat) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{33}
}

func (x *RestoreStat) GetRestoreVolumeHandle() string {
	if x != nil {
		return x.RestoreVolumeHandle
	}
	return ""
}

func (x *RestoreStat) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetRestoreStatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestoreVolumeStat []*RestoreStat `protobuf:"bytes,1,rep,name=restore_volume_stat,json=restoreVolumeStat,proto3" json:"restore_volume_stat,omitempty"`
}

func (x *GetRestoreStatResponse) Reset() {
	*x = GetRestoreStatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRestoreStatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRestoreStatResponse) ProtoMessage() {}

func (x *GetRestoreStatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRestoreStatResponse.ProtoReflect.Descriptor instead.
func (*GetRestoreStatResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{34}
}

func (x *GetRestoreStatResponse) GetRestoreVolumeStat() []*RestoreStat {
	if x != nil {
		return x.RestoreVolumeStat
	}
	return nil
}

type CancelRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	RestoreVolumeIdentity []*RestoreVolumeIdentity `protobuf:"bytes,1,rep,name=restore_volume_identity,json=restoreVolumeIdentity,proto3" json:"restore_volume_identity,omitempty"`
	// optional
	Parameters map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CancelRestoreRequest) Reset() {
	*x = CancelRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRestoreRequest) ProtoMessage() {}

func (x *CancelRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRestoreRequest.ProtoReflect.Descriptor instead.
func (*CancelRestoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{35}
}

func (x *CancelRestoreRequest) GetRestoreVolumeIdentity() []*RestoreVolumeIdentity {
	if x != nil {
		return x.RestoreVolumeIdentity
	}
	return nil
}

func (x *CancelRestoreRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CancelRestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	Success *wrappers.BoolValue `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  []string            `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CancelRestoreResponse) Reset() {
	*x = CancelRestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRestoreResponse) ProtoMessage() {}

func (x *CancelRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRestoreResponse.ProtoReflect.Descriptor instead.
func (*CancelRestoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{36}
}

func (x *CancelRestoreResponse) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *CancelRestoreResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Service types supported
type ProviderCapability_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ProviderCapability_Service_Type `protobuf:"varint,1,opt,name=type,proto3,enum=kahu.providerservice.ProviderCapability_Service_Type" json:"type,omitempty"`
}

func (x *ProviderCapability_Service) Reset() {
	*x = ProviderCapability_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability_Service) ProtoMessage() {}

func (x *ProviderCapability_Service) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability_Service.ProtoReflect.Descriptor instead.
func (*ProviderCapability_Service) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ProviderCapability_Service) GetType() ProviderCapability_Service_Type {
	if x != nil {
		return x.Type
	}
	return ProviderCapability_Service_UNKNOWN
}

// Supported capabilities specific to metadata backup service
type ProviderCapability_MetaBackupServiceSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ProviderCapability_MetaBackupServiceSupport_Type `protobuf:"varint,1,opt,name=type,proto3,enum=kahu.providerservice.ProviderCapability_MetaBackupServiceSupport_Type" json:"type,omitempty"`
}

func (x *ProviderCapability_MetaBackupServiceSupport) Reset() {
	*x = ProviderCapability_MetaBackupServiceSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability_MetaBackupServiceSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability_MetaBackupServiceSupport) ProtoMessage() {}

func (x *ProviderCapability_MetaBackupServiceSupport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability_MetaBackupServiceSupport.ProtoReflect.Descriptor instead.
func (*ProviderCapability_MetaBackupServiceSupport) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ProviderCapability_MetaBackupServiceSupport) GetType() ProviderCapability_MetaBackupServiceSupport_Type {
	if x != nil {
		return x.Type
	}
	return ProviderCapability_MetaBackupServiceSupport_UNKNOWN
}

// Supported capabilities specific to volume backup service
type ProviderCapability_VolumeBackupServiceSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ProviderCapability_VolumeBackupServiceSupport_Type `protobuf:"varint,1,opt,name=type,proto3,enum=kahu.providerservice.ProviderCapability_VolumeBackupServiceSupport_Type" json:"type,omitempty"`
}

func (x *ProviderCapability_VolumeBackupServiceSupport) Reset() {
	*x = ProviderCapability_VolumeBackupServiceSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderCapability_VolumeBackupServiceSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderCapability_VolumeBackupServiceSupport) ProtoMessage() {}

func (x *ProviderCapability_VolumeBackupServiceSupport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderCapability_VolumeBackupServiceSupport.ProtoReflect.Descriptor instead.
func (*ProviderCapability_VolumeBackupServiceSupport) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{4, 2}
}

func (x *ProviderCapability_VolumeBackupServiceSupport) GetType() ProviderCapability_VolumeBackupServiceSupport_Type {
	if x != nil {
		return x.Type
	}
	return ProviderCapability_VolumeBackupServiceSupport_UNKNOWN
}

// File information and attributes
type UploadRequest_FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier string            `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UploadRequest_FileInfo) Reset() {
	*x = UploadRequest_FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest_FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest_FileInfo) ProtoMessage() {}

func (x *UploadRequest_FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest_FileInfo.ProtoReflect.Descriptor instead.
func (*UploadRequest_FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UploadRequest_FileInfo) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *UploadRequest_FileInfo) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DownloadResponse_FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File identifier
	FileIdentifier string `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	// Provider specific parameters passed in as opaque key-value pairs
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DownloadResponse_FileInfo) Reset() {
	*x = DownloadResponse_FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_providerservice_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse_FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse_FileInfo) ProtoMessage() {}

func (x *DownloadResponse_FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_providerservice_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse_FileInfo.ProtoReflect.Descriptor instead.
func (*DownloadResponse_FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_providerservice_proto_rawDescGZIP(), []int{12, 0}
}

func (x *DownloadResponse_FileInfo) GetFileIdentifier() string {
	if x != nil {
		return x.FileIdentifier
	}
	return ""
}

func (x *DownloadResponse_FileInfo) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_proto_providerservice_proto protoreflect.FileDescriptor

var file_proto_providerservice_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd1, 0x06, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x73, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x13, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6b, 0x61,
	0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x02, 0x1a, 0x9e, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x01, 0x1a, 0xb3, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x48, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x45, 0x44, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xcf, 0x02, 0x0a,
	0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0xd0, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd8,
	0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x59, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x14, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x61, 0x68,
	0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x02, 0x0a,
	0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xd3, 0x01, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x5f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x76,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x76, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x03, 0x70, 0x76, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x03, 0x70, 0x76, 0x63, 0x12, 0x4d, 0x0a, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x76, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x76, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x68,
	0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x09, 0x56,
	0x6f, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x02, 0x70, 0x76, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x08, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x67, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd4, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x02, 0x70, 0x76, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0xa6, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xf6,
	0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61,
	0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xf8, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61,
	0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x61, 0x68, 0x75,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x12,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x63, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x15, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x61,
	0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xdb, 0x02, 0x0a, 0x08, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x6b, 0x61, 0x68, 0x75,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x61, 0x68,
	0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x22, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf2, 0x02, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x4e, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x23, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x67, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x6b, 0x61,
	0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x95, 0x06, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x64, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2a, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x33, 0x2e, 0x6b,
	0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x2e, 0x6b, 0x61, 0x68,
	0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2b, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x61, 0x68, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x18, 0x5a, 0x16, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x3b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_providerservice_proto_rawDescOnce sync.Once
	file_proto_providerservice_proto_rawDescData = file_proto_providerservice_proto_rawDesc
)

func file_proto_providerservice_proto_rawDescGZIP() []byte {
	file_proto_providerservice_proto_rawDescOnce.Do(func() {
		file_proto_providerservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_providerservice_proto_rawDescData)
	})
	return file_proto_providerservice_proto_rawDescData
}

var file_proto_providerservice_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_providerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_proto_providerservice_proto_goTypes = []interface{}{
	(ProviderCapability_Service_Type)(0),                    // 0: kahu.providerservice.ProviderCapability.Service.Type
	(ProviderCapability_MetaBackupServiceSupport_Type)(0),   // 1: kahu.providerservice.ProviderCapability.MetaBackupServiceSupport.Type
	(ProviderCapability_VolumeBackupServiceSupport_Type)(0), // 2: kahu.providerservice.ProviderCapability.VolumeBackupServiceSupport.Type
	(*GetProviderInfoRequest)(nil),                          // 3: kahu.providerservice.GetProviderInfoRequest
	(*GetProviderInfoResponse)(nil),                         // 4: kahu.providerservice.GetProviderInfoResponse
	(*GetProviderCapabilitiesRequest)(nil),                  // 5: kahu.providerservice.GetProviderCapabilitiesRequest
	(*GetProviderCapabilitiesResponse)(nil),                 // 6: kahu.providerservice.GetProviderCapabilitiesResponse
	(*ProviderCapability)(nil),                              // 7: kahu.providerservice.ProviderCapability
	(*ProbeRequest)(nil),                                    // 8: kahu.providerservice.ProbeRequest
	(*ProbeResponse)(nil),                                   // 9: kahu.providerservice.ProbeResponse
	(*Empty)(nil),                                           // 10: kahu.providerservice.Empty
	(*UploadRequest)(nil),                                   // 11: kahu.providerservice.UploadRequest
	(*ObjectExistsRequest)(nil),                             // 12: kahu.providerservice.ObjectExistsRequest
	(*ObjectExistsResponse)(nil),                            // 13: kahu.providerservice.ObjectExistsResponse
	(*DownloadRequest)(nil),                                 // 14: kahu.providerservice.DownloadRequest
	(*DownloadResponse)(nil),                                // 15: kahu.providerservice.DownloadResponse
	(*DeleteRequest)(nil),                                   // 16: kahu.providerservice.DeleteRequest
	(*BackupIdentifier)(nil),                                // 17: kahu.providerservice.BackupIdentifier
	(*BackupIdentity)(nil),                                  // 18: kahu.providerservice.BackupIdentity
	(*RestoreIdentifier)(nil),                               // 19: kahu.providerservice.RestoreIdentifier
	(*RestoreVolumeIdentifier)(nil),                         // 20: kahu.providerservice.RestoreVolumeIdentifier
	(*RestoreVolumeIdentity)(nil),                           // 21: kahu.providerservice.RestoreVolumeIdentity
	(*VolBackup)(nil),                                       // 22: kahu.providerservice.VolBackup
	(*Snapshot)(nil),                                        // 23: kahu.providerservice.Snapshot
	(*StartBackupRequest)(nil),                              // 24: kahu.providerservice.StartBackupRequest
	(*StartBackupResponse)(nil),                             // 25: kahu.providerservice.StartBackupResponse
	(*DeleteBackupRequest)(nil),                             // 26: kahu.providerservice.DeleteBackupRequest
	(*DeleteBackupResponse)(nil),                            // 27: kahu.providerservice.DeleteBackupResponse
	(*CancelBackupRequest)(nil),                             // 28: kahu.providerservice.CancelBackupRequest
	(*CancelBackupResponse)(nil),                            // 29: kahu.providerservice.CancelBackupResponse
	(*GetBackupStatRequest)(nil),                            // 30: kahu.providerservice.GetBackupStatRequest
	(*BackupStat)(nil),                                      // 31: kahu.providerservice.BackupStat
	(*GetBackupStatResponse)(nil),                           // 32: kahu.providerservice.GetBackupStatResponse
	(*CreateVolumeFromBackupRequest)(nil),                   // 33: kahu.providerservice.CreateVolumeFromBackupRequest
	(*CreateVolumeFromBackupResponse)(nil),                  // 34: kahu.providerservice.CreateVolumeFromBackupResponse
	(*GetRestoreStatRequest)(nil),                           // 35: kahu.providerservice.GetRestoreStatRequest
	(*RestoreStat)(nil),                                     // 36: kahu.providerservice.RestoreStat
	(*GetRestoreStatResponse)(nil),                          // 37: kahu.providerservice.GetRestoreStatResponse
	(*CancelRestoreRequest)(nil),                            // 38: kahu.providerservice.CancelRestoreRequest
	(*CancelRestoreResponse)(nil),                           // 39: kahu.providerservice.CancelRestoreResponse
	nil,                                                     // 40: kahu.providerservice.GetProviderInfoResponse.ManifestEntry
	(*ProviderCapability_Service)(nil),                      // 41: kahu.providerservice.ProviderCapability.Service
	(*ProviderCapability_MetaBackupServiceSupport)(nil),     // 42: kahu.providerservice.ProviderCapability.MetaBackupServiceSupport
	(*ProviderCapability_VolumeBackupServiceSupport)(nil),   // 43: kahu.providerservice.ProviderCapability.VolumeBackupServiceSupport
	(*UploadRequest_FileInfo)(nil),                          // 44: kahu.providerservice.UploadRequest.FileInfo
	nil,                                                     // 45: kahu.providerservice.UploadRequest.FileInfo.AttributesEntry
	nil,                                                     // 46: kahu.providerservice.ObjectExistsRequest.AttributesEntry
	nil,                                                     // 47: kahu.providerservice.DownloadRequest.AttributesEntry
	(*DownloadResponse_FileInfo)(nil),                       // 48: kahu.providerservice.DownloadResponse.FileInfo
	nil,                                                     // 49: kahu.providerservice.DownloadResponse.FileInfo.AttributesEntry
	nil,                                                     // 50: kahu.providerservice.DeleteRequest.AttributesEntry
	nil,                                                     // 51: kahu.providerservice.BackupIdentity.BackupAttributesEntry
	nil,                                                     // 52: kahu.providerservice.RestoreVolumeIdentity.VolumeAttributesEntry
	nil,                                                     // 53: kahu.providerservice.Snapshot.SnapshotAttributesEntry
	nil,                                                     // 54: kahu.providerservice.StartBackupRequest.ParametersEntry
	nil,                                                     // 55: kahu.providerservice.DeleteBackupRequest.ParametersEntry
	nil,                                                     // 56: kahu.providerservice.CancelBackupRequest.ParametersEntry
	nil,                                                     // 57: kahu.providerservice.GetBackupStatRequest.ParametersEntry
	nil,                                                     // 58: kahu.providerservice.CreateVolumeFromBackupRequest.ParametersEntry
	nil,                                                     // 59: kahu.providerservice.GetRestoreStatRequest.ParametersEntry
	nil,                                                     // 60: kahu.providerservice.CancelRestoreRequest.ParametersEntry
	(*wrappers.BoolValue)(nil),                              // 61: google.protobuf.BoolValue
	(*v1.PersistentVolumeClaim)(nil),                        // 62: k8s.io.api.core.v1.PersistentVolumeClaim
	(*v1.PersistentVolume)(nil),                             // 63: k8s.io.api.core.v1.PersistentVolume
}
var file_proto_providerservice_proto_depIdxs = []int32{
	40, // 0: kahu.providerservice.GetProviderInfoResponse.manifest:type_name -> kahu.providerservice.GetProviderInfoResponse.ManifestEntry
	7,  // 1: kahu.providerservice.GetProviderCapabilitiesResponse.capabilities:type_name -> kahu.providerservice.ProviderCapability
	41, // 2: kahu.providerservice.ProviderCapability.service:type_name -> kahu.providerservice.ProviderCapability.Service
	42, // 3: kahu.providerservice.ProviderCapability.meta_backup_service:type_name -> kahu.providerservice.ProviderCapability.MetaBackupServiceSupport
	43, // 4: kahu.providerservice.ProviderCapability.volume_backup_service:type_name -> kahu.providerservice.ProviderCapability.VolumeBackupServiceSupport
	61, // 5: kahu.providerservice.ProbeResponse.ready:type_name -> google.protobuf.BoolValue
	44, // 6: kahu.providerservice.UploadRequest.info:type_name -> kahu.providerservice.UploadRequest.FileInfo
	46, // 7: kahu.providerservice.ObjectExistsRequest.attributes:type_name -> kahu.providerservice.ObjectExistsRequest.AttributesEntry
	47, // 8: kahu.providerservice.DownloadRequest.attributes:type_name -> kahu.providerservice.DownloadRequest.AttributesEntry
	48, // 9: kahu.providerservice.DownloadResponse.info:type_name -> kahu.providerservice.DownloadResponse.FileInfo
	50, // 10: kahu.providerservice.DeleteRequest.attributes:type_name -> kahu.providerservice.DeleteRequest.AttributesEntry
	18, // 11: kahu.providerservice.BackupIdentifier.backup_identity:type_name -> kahu.providerservice.BackupIdentity
	51, // 12: kahu.providerservice.BackupIdentity.backup_attributes:type_name -> kahu.providerservice.BackupIdentity.BackupAttributesEntry
	62, // 13: kahu.providerservice.RestoreIdentifier.pvc:type_name -> k8s.io.api.core.v1.PersistentVolumeClaim
	18, // 14: kahu.providerservice.RestoreIdentifier.backup_identity:type_name -> kahu.providerservice.BackupIdentity
	21, // 15: kahu.providerservice.RestoreVolumeIdentifier.volume_identity:type_name -> kahu.providerservice.RestoreVolumeIdentity
	52, // 16: kahu.providerservice.RestoreVolumeIdentity.volume_attributes:type_name -> kahu.providerservice.RestoreVolumeIdentity.VolumeAttributesEntry
	63, // 17: kahu.providerservice.VolBackup.pv:type_name -> k8s.io.api.core.v1.PersistentVolume
	23, // 18: kahu.providerservice.VolBackup.snapshot:type_name -> kahu.providerservice.Snapshot
	53, // 19: kahu.providerservice.Snapshot.snapshot_attributes:type_name -> kahu.providerservice.Snapshot.SnapshotAttributesEntry
	63, // 20: kahu.providerservice.StartBackupRequest.pv:type_name -> k8s.io.api.core.v1.PersistentVolume
	22, // 21: kahu.providerservice.StartBackupRequest.backupInfo:type_name -> kahu.providerservice.VolBackup
	54, // 22: kahu.providerservice.StartBackupRequest.parameters:type_name -> kahu.providerservice.StartBackupRequest.ParametersEntry
	17, // 23: kahu.providerservice.StartBackupResponse.backup_info:type_name -> kahu.providerservice.BackupIdentifier
	18, // 24: kahu.providerservice.DeleteBackupRequest.backup_info:type_name -> kahu.providerservice.BackupIdentity
	55, // 25: kahu.providerservice.DeleteBackupRequest.parameters:type_name -> kahu.providerservice.DeleteBackupRequest.ParametersEntry
	61, // 26: kahu.providerservice.DeleteBackupResponse.success:type_name -> google.protobuf.BoolValue
	18, // 27: kahu.providerservice.CancelBackupRequest.backup_info:type_name -> kahu.providerservice.BackupIdentity
	56, // 28: kahu.providerservice.CancelBackupRequest.parameters:type_name -> kahu.providerservice.CancelBackupRequest.ParametersEntry
	61, // 29: kahu.providerservice.CancelBackupResponse.success:type_name -> google.protobuf.BoolValue
	18, // 30: kahu.providerservice.GetBackupStatRequest.backup_info:type_name -> kahu.providerservice.BackupIdentity
	57, // 31: kahu.providerservice.GetBackupStatRequest.parameters:type_name -> kahu.providerservice.GetBackupStatRequest.ParametersEntry
	31, // 32: kahu.providerservice.GetBackupStatResponse.backup_stats:type_name -> kahu.providerservice.BackupStat
	19, // 33: kahu.providerservice.CreateVolumeFromBackupRequest.restore_info:type_name -> kahu.providerservice.RestoreIdentifier
	58, // 34: kahu.providerservice.CreateVolumeFromBackupRequest.parameters:type_name -> kahu.providerservice.CreateVolumeFromBackupRequest.ParametersEntry
	20, // 35: kahu.providerservice.CreateVolumeFromBackupResponse.volume_identifiers:type_name -> kahu.providerservice.RestoreVolumeIdentifier
	21, // 36: kahu.providerservice.GetRestoreStatRequest.restore_volume_identity:type_name -> kahu.providerservice.RestoreVolumeIdentity
	59, // 37: kahu.providerservice.GetRestoreStatRequest.parameters:type_name -> kahu.providerservice.GetRestoreStatRequest.ParametersEntry
	36, // 38: kahu.providerservice.GetRestoreStatResponse.restore_volume_stat:type_name -> kahu.providerservice.RestoreStat
	21, // 39: kahu.providerservice.CancelRestoreRequest.restore_volume_identity:type_name -> kahu.providerservice.RestoreVolumeIdentity
	60, // 40: kahu.providerservice.CancelRestoreRequest.parameters:type_name -> kahu.providerservice.CancelRestoreRequest.ParametersEntry
	61, // 41: kahu.providerservice.CancelRestoreResponse.success:type_name -> google.protobuf.BoolValue
	0,  // 42: kahu.providerservice.ProviderCapability.Service.type:type_name -> kahu.providerservice.ProviderCapability.Service.Type
	1,  // 43: kahu.providerservice.ProviderCapability.MetaBackupServiceSupport.type:type_name -> kahu.providerservice.ProviderCapability.MetaBackupServiceSupport.Type
	2,  // 44: kahu.providerservice.ProviderCapability.VolumeBackupServiceSupport.type:type_name -> kahu.providerservice.ProviderCapability.VolumeBackupServiceSupport.Type
	45, // 45: kahu.providerservice.UploadRequest.FileInfo.attributes:type_name -> kahu.providerservice.UploadRequest.FileInfo.AttributesEntry
	49, // 46: kahu.providerservice.DownloadResponse.FileInfo.attributes:type_name -> kahu.providerservice.DownloadResponse.FileInfo.AttributesEntry
	3,  // 47: kahu.providerservice.Identity.GetProviderInfo:input_type -> kahu.providerservice.GetProviderInfoRequest
	5,  // 48: kahu.providerservice.Identity.GetProviderCapabilities:input_type -> kahu.providerservice.GetProviderCapabilitiesRequest
	8,  // 49: kahu.providerservice.Identity.Probe:input_type -> kahu.providerservice.ProbeRequest
	11, // 50: kahu.providerservice.MetaBackup.Upload:input_type -> kahu.providerservice.UploadRequest
	12, // 51: kahu.providerservice.MetaBackup.ObjectExists:input_type -> kahu.providerservice.ObjectExistsRequest
	14, // 52: kahu.providerservice.MetaBackup.Download:input_type -> kahu.providerservice.DownloadRequest
	16, // 53: kahu.providerservice.MetaBackup.Delete:input_type -> kahu.providerservice.DeleteRequest
	24, // 54: kahu.providerservice.VolumeBackup.StartBackup:input_type -> kahu.providerservice.StartBackupRequest
	26, // 55: kahu.providerservice.VolumeBackup.DeleteBackup:input_type -> kahu.providerservice.DeleteBackupRequest
	28, // 56: kahu.providerservice.VolumeBackup.CancelBackup:input_type -> kahu.providerservice.CancelBackupRequest
	30, // 57: kahu.providerservice.VolumeBackup.GetBackupStat:input_type -> kahu.providerservice.GetBackupStatRequest
	33, // 58: kahu.providerservice.VolumeBackup.CreateVolumeFromBackup:input_type -> kahu.providerservice.CreateVolumeFromBackupRequest
	38, // 59: kahu.providerservice.VolumeBackup.CancelRestore:input_type -> kahu.providerservice.CancelRestoreRequest
	35, // 60: kahu.providerservice.VolumeBackup.GetRestoreStat:input_type -> kahu.providerservice.GetRestoreStatRequest
	4,  // 61: kahu.providerservice.Identity.GetProviderInfo:output_type -> kahu.providerservice.GetProviderInfoResponse
	6,  // 62: kahu.providerservice.Identity.GetProviderCapabilities:output_type -> kahu.providerservice.GetProviderCapabilitiesResponse
	9,  // 63: kahu.providerservice.Identity.Probe:output_type -> kahu.providerservice.ProbeResponse
	10, // 64: kahu.providerservice.MetaBackup.Upload:output_type -> kahu.providerservice.Empty
	13, // 65: kahu.providerservice.MetaBackup.ObjectExists:output_type -> kahu.providerservice.ObjectExistsResponse
	15, // 66: kahu.providerservice.MetaBackup.Download:output_type -> kahu.providerservice.DownloadResponse
	10, // 67: kahu.providerservice.MetaBackup.Delete:output_type -> kahu.providerservice.Empty
	25, // 68: kahu.providerservice.VolumeBackup.StartBackup:output_type -> kahu.providerservice.StartBackupResponse
	27, // 69: kahu.providerservice.VolumeBackup.DeleteBackup:output_type -> kahu.providerservice.DeleteBackupResponse
	29, // 70: kahu.providerservice.VolumeBackup.CancelBackup:output_type -> kahu.providerservice.CancelBackupResponse
	32, // 71: kahu.providerservice.VolumeBackup.GetBackupStat:output_type -> kahu.providerservice.GetBackupStatResponse
	34, // 72: kahu.providerservice.VolumeBackup.CreateVolumeFromBackup:output_type -> kahu.providerservice.CreateVolumeFromBackupResponse
	39, // 73: kahu.providerservice.VolumeBackup.CancelRestore:output_type -> kahu.providerservice.CancelRestoreResponse
	37, // 74: kahu.providerservice.VolumeBackup.GetRestoreStat:output_type -> kahu.providerservice.GetRestoreStatResponse
	61, // [61:75] is the sub-list for method output_type
	47, // [47:61] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_proto_providerservice_proto_init() }
func file_proto_providerservice_proto_init() {
	if File_proto_providerservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_providerservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVolumeIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVolumeIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackupStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackupStatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeFromBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeFromBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRestoreStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRestoreStatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability_MetaBackupServiceSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderCapability_VolumeBackupServiceSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest_FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_providerservice_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResponse_FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_providerservice_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ProviderCapability_Service_)(nil),
		(*ProviderCapability_MetaBackupService)(nil),
		(*ProviderCapability_VolumeBackupService)(nil),
	}
	file_proto_providerservice_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UploadRequest_Info)(nil),
		(*UploadRequest_ChunkData)(nil),
	}
	file_proto_providerservice_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*DownloadResponse_Info)(nil),
		(*DownloadResponse_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_providerservice_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_providerservice_proto_goTypes,
		DependencyIndexes: file_proto_providerservice_proto_depIdxs,
		EnumInfos:         file_proto_providerservice_proto_enumTypes,
		MessageInfos:      file_proto_providerservice_proto_msgTypes,
	}.Build()
	File_proto_providerservice_proto = out.File
	file_proto_providerservice_proto_rawDesc = nil
	file_proto_providerservice_proto_goTypes = nil
	file_proto_providerservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentityClient interface {
	// Get basic information from the provider
	GetProviderInfo(ctx context.Context, in *GetProviderInfoRequest, opts ...grpc.CallOption) (*GetProviderInfoResponse, error)
	// Get capabilities from the provider
	GetProviderCapabilities(ctx context.Context, in *GetProviderCapabilitiesRequest, opts ...grpc.CallOption) (*GetProviderCapabilitiesResponse, error)
	// Probe provider for availability check
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
}

type identityClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityClient(cc grpc.ClientConnInterface) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) GetProviderInfo(ctx context.Context, in *GetProviderInfoRequest, opts ...grpc.CallOption) (*GetProviderInfoResponse, error) {
	out := new(GetProviderInfoResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.Identity/GetProviderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) GetProviderCapabilities(ctx context.Context, in *GetProviderCapabilitiesRequest, opts ...grpc.CallOption) (*GetProviderCapabilitiesResponse, error) {
	out := new(GetProviderCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.Identity/GetProviderCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.Identity/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
type IdentityServer interface {
	// Get basic information from the provider
	GetProviderInfo(context.Context, *GetProviderInfoRequest) (*GetProviderInfoResponse, error)
	// Get capabilities from the provider
	GetProviderCapabilities(context.Context, *GetProviderCapabilitiesRequest) (*GetProviderCapabilitiesResponse, error)
	// Probe provider for availability check
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
}

// UnimplementedIdentityServer can be embedded to have forward compatible implementations.
type UnimplementedIdentityServer struct {
}

func (*UnimplementedIdentityServer) GetProviderInfo(context.Context, *GetProviderInfoRequest) (*GetProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderInfo not implemented")
}
func (*UnimplementedIdentityServer) GetProviderCapabilities(context.Context, *GetProviderCapabilitiesRequest) (*GetProviderCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderCapabilities not implemented")
}
func (*UnimplementedIdentityServer) Probe(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}

func RegisterIdentityServer(s *grpc.Server, srv IdentityServer) {
	s.RegisterService(&_Identity_serviceDesc, srv)
}

func _Identity_GetProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.Identity/GetProviderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetProviderInfo(ctx, req.(*GetProviderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_GetProviderCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetProviderCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.Identity/GetProviderCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetProviderCapabilities(ctx, req.(*GetProviderCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.Identity/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Identity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kahu.providerservice.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviderInfo",
			Handler:    _Identity_GetProviderInfo_Handler,
		},
		{
			MethodName: "GetProviderCapabilities",
			Handler:    _Identity_GetProviderCapabilities_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Identity_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/providerservice.proto",
}

// MetaBackupClient is the client API for MetaBackup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetaBackupClient interface {
	// Upload input metadata info to configured repo
	Upload(ctx context.Context, opts ...grpc.CallOption) (MetaBackup_UploadClient, error)
	// Check if the input metadata object exists at configured repo
	ObjectExists(ctx context.Context, in *ObjectExistsRequest, opts ...grpc.CallOption) (*ObjectExistsResponse, error)
	// Download input metadata info from configured repo
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (MetaBackup_DownloadClient, error)
	// Delete input metadata info from configured repo
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type metaBackupClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaBackupClient(cc grpc.ClientConnInterface) MetaBackupClient {
	return &metaBackupClient{cc}
}

func (c *metaBackupClient) Upload(ctx context.Context, opts ...grpc.CallOption) (MetaBackup_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaBackup_serviceDesc.Streams[0], "/kahu.providerservice.MetaBackup/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaBackupUploadClient{stream}
	return x, nil
}

type MetaBackup_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type metaBackupUploadClient struct {
	grpc.ClientStream
}

func (x *metaBackupUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metaBackupUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaBackupClient) ObjectExists(ctx context.Context, in *ObjectExistsRequest, opts ...grpc.CallOption) (*ObjectExistsResponse, error) {
	out := new(ObjectExistsResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.MetaBackup/ObjectExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaBackupClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (MetaBackup_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetaBackup_serviceDesc.Streams[1], "/kahu.providerservice.MetaBackup/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaBackupDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaBackup_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type metaBackupDownloadClient struct {
	grpc.ClientStream
}

func (x *metaBackupDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metaBackupClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.MetaBackup/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaBackupServer is the server API for MetaBackup service.
type MetaBackupServer interface {
	// Upload input metadata info to configured repo
	Upload(MetaBackup_UploadServer) error
	// Check if the input metadata object exists at configured repo
	ObjectExists(context.Context, *ObjectExistsRequest) (*ObjectExistsResponse, error)
	// Download input metadata info from configured repo
	Download(*DownloadRequest, MetaBackup_DownloadServer) error
	// Delete input metadata info from configured repo
	Delete(context.Context, *DeleteRequest) (*Empty, error)
}

// UnimplementedMetaBackupServer can be embedded to have forward compatible implementations.
type UnimplementedMetaBackupServer struct {
}

func (*UnimplementedMetaBackupServer) Upload(MetaBackup_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedMetaBackupServer) ObjectExists(context.Context, *ObjectExistsRequest) (*ObjectExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectExists not implemented")
}
func (*UnimplementedMetaBackupServer) Download(*DownloadRequest, MetaBackup_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedMetaBackupServer) Delete(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterMetaBackupServer(s *grpc.Server, srv MetaBackupServer) {
	s.RegisterService(&_MetaBackup_serviceDesc, srv)
}

func _MetaBackup_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetaBackupServer).Upload(&metaBackupUploadServer{stream})
}

type MetaBackup_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type metaBackupUploadServer struct {
	grpc.ServerStream
}

func (x *metaBackupUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metaBackupUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetaBackup_ObjectExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaBackupServer).ObjectExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.MetaBackup/ObjectExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaBackupServer).ObjectExists(ctx, req.(*ObjectExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaBackup_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaBackupServer).Download(m, &metaBackupDownloadServer{stream})
}

type MetaBackup_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type metaBackupDownloadServer struct {
	grpc.ServerStream
}

func (x *metaBackupDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MetaBackup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaBackupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.MetaBackup/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaBackupServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetaBackup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kahu.providerservice.MetaBackup",
	HandlerType: (*MetaBackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObjectExists",
			Handler:    _MetaBackup_ObjectExists_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MetaBackup_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _MetaBackup_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _MetaBackup_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/providerservice.proto",
}

// VolumeBackupClient is the client API for VolumeBackup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeBackupClient interface {
	// Create backup of the provided volumes
	StartBackup(ctx context.Context, in *StartBackupRequest, opts ...grpc.CallOption) (*StartBackupResponse, error)
	// Delete given backup
	DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*DeleteBackupResponse, error)
	// Cancel given backup
	CancelBackup(ctx context.Context, in *CancelBackupRequest, opts ...grpc.CallOption) (*CancelBackupResponse, error)
	// Get backup statistics
	GetBackupStat(ctx context.Context, in *GetBackupStatRequest, opts ...grpc.CallOption) (*GetBackupStatResponse, error)
	// Create volume from backup (for restore)
	CreateVolumeFromBackup(ctx context.Context, in *CreateVolumeFromBackupRequest, opts ...grpc.CallOption) (*CreateVolumeFromBackupResponse, error)
	// Cancel given restore
	CancelRestore(ctx context.Context, in *CancelRestoreRequest, opts ...grpc.CallOption) (*CancelRestoreResponse, error)
	// Get restore statistics
	GetRestoreStat(ctx context.Context, in *GetRestoreStatRequest, opts ...grpc.CallOption) (*GetRestoreStatResponse, error)
}

type volumeBackupClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeBackupClient(cc grpc.ClientConnInterface) VolumeBackupClient {
	return &volumeBackupClient{cc}
}

func (c *volumeBackupClient) StartBackup(ctx context.Context, in *StartBackupRequest, opts ...grpc.CallOption) (*StartBackupResponse, error) {
	out := new(StartBackupResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/StartBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeBackupClient) DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*DeleteBackupResponse, error) {
	out := new(DeleteBackupResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/DeleteBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeBackupClient) CancelBackup(ctx context.Context, in *CancelBackupRequest, opts ...grpc.CallOption) (*CancelBackupResponse, error) {
	out := new(CancelBackupResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/CancelBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeBackupClient) GetBackupStat(ctx context.Context, in *GetBackupStatRequest, opts ...grpc.CallOption) (*GetBackupStatResponse, error) {
	out := new(GetBackupStatResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/GetBackupStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeBackupClient) CreateVolumeFromBackup(ctx context.Context, in *CreateVolumeFromBackupRequest, opts ...grpc.CallOption) (*CreateVolumeFromBackupResponse, error) {
	out := new(CreateVolumeFromBackupResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/CreateVolumeFromBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeBackupClient) CancelRestore(ctx context.Context, in *CancelRestoreRequest, opts ...grpc.CallOption) (*CancelRestoreResponse, error) {
	out := new(CancelRestoreResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/CancelRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeBackupClient) GetRestoreStat(ctx context.Context, in *GetRestoreStatRequest, opts ...grpc.CallOption) (*GetRestoreStatResponse, error) {
	out := new(GetRestoreStatResponse)
	err := c.cc.Invoke(ctx, "/kahu.providerservice.VolumeBackup/GetRestoreStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeBackupServer is the server API for VolumeBackup service.
type VolumeBackupServer interface {
	// Create backup of the provided volumes
	StartBackup(context.Context, *StartBackupRequest) (*StartBackupResponse, error)
	// Delete given backup
	DeleteBackup(context.Context, *DeleteBackupRequest) (*DeleteBackupResponse, error)
	// Cancel given backup
	CancelBackup(context.Context, *CancelBackupRequest) (*CancelBackupResponse, error)
	// Get backup statistics
	GetBackupStat(context.Context, *GetBackupStatRequest) (*GetBackupStatResponse, error)
	// Create volume from backup (for restore)
	CreateVolumeFromBackup(context.Context, *CreateVolumeFromBackupRequest) (*CreateVolumeFromBackupResponse, error)
	// Cancel given restore
	CancelRestore(context.Context, *CancelRestoreRequest) (*CancelRestoreResponse, error)
	// Get restore statistics
	GetRestoreStat(context.Context, *GetRestoreStatRequest) (*GetRestoreStatResponse, error)
}

// UnimplementedVolumeBackupServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeBackupServer struct {
}

func (*UnimplementedVolumeBackupServer) StartBackup(context.Context, *StartBackupRequest) (*StartBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBackup not implemented")
}
func (*UnimplementedVolumeBackupServer) DeleteBackup(context.Context, *DeleteBackupRequest) (*DeleteBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (*UnimplementedVolumeBackupServer) CancelBackup(context.Context, *CancelBackupRequest) (*CancelBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBackup not implemented")
}
func (*UnimplementedVolumeBackupServer) GetBackupStat(context.Context, *GetBackupStatRequest) (*GetBackupStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupStat not implemented")
}
func (*UnimplementedVolumeBackupServer) CreateVolumeFromBackup(context.Context, *CreateVolumeFromBackupRequest) (*CreateVolumeFromBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeFromBackup not implemented")
}
func (*UnimplementedVolumeBackupServer) CancelRestore(context.Context, *CancelRestoreRequest) (*CancelRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRestore not implemented")
}
func (*UnimplementedVolumeBackupServer) GetRestoreStat(context.Context, *GetRestoreStatRequest) (*GetRestoreStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestoreStat not implemented")
}

func RegisterVolumeBackupServer(s *grpc.Server, srv VolumeBackupServer) {
	s.RegisterService(&_VolumeBackup_serviceDesc, srv)
}

func _VolumeBackup_StartBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).StartBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/StartBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).StartBackup(ctx, req.(*StartBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeBackup_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/DeleteBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).DeleteBackup(ctx, req.(*DeleteBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeBackup_CancelBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).CancelBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/CancelBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).CancelBackup(ctx, req.(*CancelBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeBackup_GetBackupStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).GetBackupStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/GetBackupStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).GetBackupStat(ctx, req.(*GetBackupStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeBackup_CreateVolumeFromBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeFromBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).CreateVolumeFromBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/CreateVolumeFromBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).CreateVolumeFromBackup(ctx, req.(*CreateVolumeFromBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeBackup_CancelRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).CancelRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/CancelRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).CancelRestore(ctx, req.(*CancelRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeBackup_GetRestoreStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestoreStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeBackupServer).GetRestoreStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kahu.providerservice.VolumeBackup/GetRestoreStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeBackupServer).GetRestoreStat(ctx, req.(*GetRestoreStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeBackup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kahu.providerservice.VolumeBackup",
	HandlerType: (*VolumeBackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartBackup",
			Handler:    _VolumeBackup_StartBackup_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _VolumeBackup_DeleteBackup_Handler,
		},
		{
			MethodName: "CancelBackup",
			Handler:    _VolumeBackup_CancelBackup_Handler,
		},
		{
			MethodName: "GetBackupStat",
			Handler:    _VolumeBackup_GetBackupStat_Handler,
		},
		{
			MethodName: "CreateVolumeFromBackup",
			Handler:    _VolumeBackup_CreateVolumeFromBackup_Handler,
		},
		{
			MethodName: "CancelRestore",
			Handler:    _VolumeBackup_CancelRestore_Handler,
		},
		{
			MethodName: "GetRestoreStat",
			Handler:    _VolumeBackup_GetRestoreStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/providerservice.proto",
}
